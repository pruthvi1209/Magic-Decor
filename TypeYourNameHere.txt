Praveen S
Rohan Pareek
Akhil Biju
Pruthvi Kumar
Payal Shah


-------------
import { Component, OnInit, ViewChild, ElementRef} from '@angular/core';
import { ActivatedRoute} from '@angular/router';
import { DataService } from '../../data.service';

declare var THREE : any;
declare var THREEx : any;
var camera, controls, scene, renderer, loader;
var objects = [];
var clock = new THREE.Clock();
var keyboard = new THREEx.KeyboardState();
var loader = new THREE.JSONLoader();
var onUpPosition = new THREE.Vector2();
var mouse = new THREE.Vector2();
var raycaster = new THREE.Raycaster();
var selectedObject;

@Component({
  selector: 'app-canvas',
  templateUrl: './canvas.component.html',
  styleUrls: ['./canvas.component.css']
})
export class CanvasComponent implements OnInit {
 
@ViewChild('layoutsection') dataContainer: ElementRef;

  layoutimage;
  layoutCategory;
  repo;
  counter;
  coords;
  setObj = false;
  objURL;
  a_objects;
  constructor(arouter: ActivatedRoute, private service: DataService) {
    this.counter = 0;
    this.layoutCategory = arouter.snapshot.paramMap.get('cate');
   this.layoutimage = arouter.snapshot.paramMap.get('layoutimage');
   service.getLayouts()
   .subscribe((res)=>{
      this.repo = res;
   })

   this.service.getObjects()
   .subscribe(res=>{
	   this.a_objects = res.json().data;
	   this.bringObjects(this.a_objects);
   })


  }

  
  setObject(objURL){
      this.objURL = objURL;
      this.setObj = true;
  }

  showCoord(event){
    this.coords = event.clientX+" : "+event.clientY;
  }

  getLayoutImage(){
    return this.layoutimage;
  }

	
  	loadObject(name){
		loader.load( 'assets/models/'+name+'/'+name+'.js', function ( geometry, materials ) {
			let mesh = new THREE.Mesh( geometry, materials );
			mesh.position.set( 200, 0, 0 );
			mesh.scale.set( 3, 3, 3 );
			mesh.name=name;
			mesh.castShadow = true;
			mesh.receiveShadow = true;
			scene.add( mesh );
			objects.push(mesh);
		})
	  }

	
	undo(){
				if(objects.length==0){
					alert("No objects to delete");
					return;
				}
				let elemnt =objects.pop();
				console.log(elemnt);
				scene.remove(elemnt);
		}
		saveProject(){
				this.service.saveProject(scene);
	}
	
	pullProject()
	{
		this.service.pullProject()
		.subscribe(res=>{
			this.reloadChair(res[0].scene, res[0].name);	
		
		})
	}
	reloadChair(position, name){

			loader.load( 'assets/models/chair/chair.js', function ( geometry, materials ) {
				let mesh = new THREE.Mesh( geometry, materials );
				mesh.position.set( position.x, position.y, position.z );
				mesh.scale.set( 3, 3, 3 );
				mesh.name=name;
				mesh.castShadow = true;
				mesh.receiveShadow = true;
				scene.add( mesh );
				objects.push(mesh);
			})
	}

	static deleteSelected(){
		scene.remove(selectedObject);
		console.log("Deleted");
	}
	bringObjects(objects)
	{
		console.log("fetched objects: "+objects[0].name);
	}

	add(){
    var box;
    var room=[
        new THREE.MeshBasicMaterial({ map : new THREE.TextureLoader().load('assets/images/3dlayout/wall5.jpg'), side : THREE.BackSide }),
        new THREE.MeshBasicMaterial({ map : new THREE.TextureLoader().load('assets/images/3dlayout/wall3.jpg'), side : THREE.BackSide}),
        new THREE.MeshBasicMaterial({ map : new THREE.TextureLoader().load('assets/images/3dlayout/wall5.jpg'), side : THREE.BackSide }),
        new THREE.MeshBasicMaterial({ map : new THREE.TextureLoader().load('assets/images/3dlayout/floor2.jpg'), side : THREE.DoubleSide }),
        new THREE.MeshBasicMaterial({ map : new THREE.TextureLoader().load('assets/images/3dlayout/wall3.jpg'), side : THREE.BackSide}),
        new THREE.MeshBasicMaterial({ map : new THREE.TextureLoader().load('assets/images/3dlayout/wall3-win.jpg'), side : THREE.BackSide })        
    ];
        box = new THREE.Mesh(new THREE.BoxGeometry(200,60,100),new THREE.MeshFaceMaterial(room));
        box.name="box";
		box.scale.set( 10, 10, 10 );
        // scene.remove(box1);
        scene.add(box);
}
     ngOnInit(){
		 
			init();
			function init() {
				let container = document.getElementById("myCanvas");
				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.set(0,150,1000);
				controls = new THREE.OrbitControls( camera );
				controls.rotateSpeed = 0.5;
				controls.zoomSpeed = 1;
				controls.enablePan = false;
				controls.dampingFactor = 0.3;
				scene = new THREE.Scene();
				scene.background = new THREE.Color( 0xf0f0f0 );
				scene.add( new THREE.AmbientLight( 0x505050 ) );
				var light = new THREE.SpotLight( 0xffffff, 1.5 );
				light.position.set( 0, 500, 2000 );
				light.castShadow = true;
				light.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 200, 10000 ) );
				light.shadow.bias = - 0.00022;
				light.shadow.mapSize.width = 2048;
				light.shadow.mapSize.height = 2048;
				scene.add( light );
				var geometry = new THREE.BoxGeometry( 80, 80, 80 );
				for ( var i = 0; i < 2; i ++ ) {
					var object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } ) );
					object.position.set(Math.random() * 600 - 300, 45, 0);
					object.castShadow = true;
					object.receiveShadow = true;
					scene.add( object );
					objects.push( object );
				}

				selectedObject=objects[0];

				var floorTexture = new THREE.TextureLoader().load( '../assets/floor.jpg' );
				floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
				floorTexture.repeat.set( 10, 10 );
				var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );
				var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
				var floor = new THREE.Mesh(floorGeometry, floorMaterial);
				floor.position.y = -0.5;
				floor.rotation.x = Math.PI / 2;
				//scene.add(floor);

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth-(0.28*window.innerWidth), window.innerHeight-100 );
				renderer.shadowMap.enabled = true;
				renderer.shadowMap.type = THREE.PCFShadowMap;
				container.appendChild( renderer.domElement );
				var dragControls = new THREE.DragControls( objects, camera, renderer.domElement );
				dragControls.addEventListener( 'dragstart', function ( event ) { controls.enabled = false; } );
				dragControls.addEventListener( 'dragend', function ( event ) { controls.enabled = true; } );
				window.addEventListener( 'resize', onWindowResize, false );
				window.addEventListener( 'mouseup', onMouseUp, false );
				document.getElementById("shot").addEventListener('click', takeScreenshot);
			}
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth-(0.28*window.innerWidth), window.innerHeight-100 );
			}
			function takeScreenshot() {
				// open in new window like this
				var w = window.open('', '');
				w.document.title = "Screenshot";
				//w.document.body.style.backgroundColor = "red";
				var img = new Image();
				// Without 'preserveDrawingBuffer' set to true, we must render now
				renderer.render(scene, camera);
				img.src = renderer.domElement.toDataURL();
				w.document.body.appendChild(img);
				
				// download file like this.
				var a = document.createElement('a');
				// Without 'preserveDrawingBuffer' set to true, we must render now
				renderer.render(scene, camera);
				a.href = renderer.domElement.toDataURL().replace("image/png", "image/octet-stream");
				a.download = 'canvas.png'
				a.click();
			}

			/*Functions to select objects on mouse click*/
			function getMousePosition( dom, x, y ) {
				var rect = dom.getBoundingClientRect();
				return [ ( x - rect.left ) / rect.width, ( y - rect.top ) / rect.height ];
			}
			function onMouseUp(event){
				var array = getMousePosition( renderer.domElement, event.clientX, event.clientY );
				onUpPosition.fromArray( array );
				handleClick();
			}
			function getIntersects( point, objects ) {
				mouse.set( ( point.x * 2 ) - 1, - ( point.y * 2 ) + 1 );
				raycaster.setFromCamera( mouse, camera );
				return raycaster.intersectObjects( objects );

			}
			function handleClick() {
					var intersects = getIntersects( onUpPosition, objects );
					if ( intersects.length > 0 ) {
						selectedObject = intersects[ 0 ].object;
						console.log(selectedObject);
					}	
			}

			function update(){

				if(objects.length==0){
					console.log("update triggered");
					return;
				}

				var delta = clock.getDelta(); // seconds.
				var moveDistance = 200 * delta; // 200 pixels per second
				var rotateAngle = Math.PI / 2 * delta;   // pi/2 radians (90 degrees) per second
				
				if ( keyboard.pressed("A") )
					selectedObject.rotation.y += rotateAngle;
				if ( keyboard.pressed("D") )
					selectedObject.rotation.y -= rotateAngle;
						
				if ( keyboard.pressed("H") )
					selectedObject.position.x -= moveDistance;
				if ( keyboard.pressed("K") )
					selectedObject.position.x += moveDistance;
				if ( keyboard.pressed("U") )
					selectedObject.position.z -= moveDistance;
				if ( keyboard.pressed("J") )
					selectedObject.position.z += moveDistance;
				if ( keyboard.pressed("R") )
					CanvasComponent.deleteSelected();

				//collision detection
				/*
				var originPoint = objects[0].position.clone();
					for (var vertexIndex = 0; vertexIndex < objects[0].geometry.vertices.length; vertexIndex++)
					{		
						var localVertex = objects[0].geometry.vertices[vertexIndex].clone();
						var globalVertex = localVertex.applyMatrix4( objects[0].matrix );
						var directionVector = globalVertex.sub( objects[0].position );
						
						var ray = new THREE.Raycaster( originPoint, directionVector.clone().normalize() );
						var collisionResults = ray.intersectObjects( objects );
						if ( collisionResults.length > 0 && collisionResults[0].distance < directionVector.length() ) 
							console.log(" Hit ");
					}*/
			}

			animate();
			function animate() {
				requestAnimationFrame( animate );
				render();
				update();
			}
			function render() {
				controls.update();
				renderer.render( scene, camera );
			}
			
     }
	 

}
